{"version":3,"sources":["../../src/Fields/CustomField.js"],"names":["CustomField","children","entityField","props","Children","map","childProps","isValidElement","child","name","value","state","defaultValue","ref","node","undefined","onChange","className","getFieldClasses","recursiveClone","cloneElement","getContainerClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAIqBA,W;;;;;;;;;;;qCACJC,Q,EAAU;AAAA;;AAAA,YACfC,WADe,GACC,KAAKC,KADN,CACfD,WADe;;AAEvB,eAAO,gBAAME,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,iBAAS;AAC3C,cAAIK,aAAa,EAAjB;AACA,cAAI,gBAAMC,cAAN,CAAqBC,KAArB,CAAJ,EAAiC;AAC/B,gBAAIA,MAAML,KAAN,CAAYM,IAAZ,KAAqBP,WAAzB,EAAsC;AACpC,kBAAMQ,QAAQ,OAAKC,KAAL,CAAWD,KAAX,IAAoBF,MAAML,KAAN,CAAYS,YAA9C;AACAN,2BAAa;AACXO,qBAAK,aAACC,IAAD,EAAU;AACb,yBAAKA,IAAL,GAAYA,IAAZ;AACA,sBAAI,OAAON,MAAMK,GAAb,KAAqB,UAAzB,EAAqC;AACnCL,0BAAMK,GAAN,CAAUC,IAAV;AACD;AACF,iBANU;AAOXJ,uBAAOK,SAPI;AAQXH,8BAAcF,KARH;AASXM,0BAAU,OAAKA,QATJ;AAUXC,2BAAW,0BAAWT,MAAML,KAAN,CAAYc,SAAvB,EAAkC,OAAKC,eAAL,EAAlC;AAVA,eAAb;AAYD;AACF;AACD,cAAKV,KAAD,IAAWA,MAAML,KAArB,EAA4B;AAC1BG,uBAAWL,QAAX,GAAsB,OAAKkB,cAAL,CAAoBX,MAAML,KAAN,CAAYF,QAAhC,CAAtB;AACA,mBAAO,gBAAMmB,YAAN,CAAmBZ,KAAnB,EAA0BF,UAA1B,CAAP;AACD;AACD,iBAAOE,KAAP;AACD,SAxBM,CAAP;AAyBD;;;+BAEQ;AACP,eACE;AAAA;AAAA,YAAS,WAAW,KAAKa,mBAAL,EAApB;AACG,eAAKF,cAAL,CAAoB,KAAKhB,KAAL,CAAWF,QAA/B;AADH,SADF;AAKD;;;;;;oBApCkBD,W","file":"CustomField.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport Field from './Field';\n\nexport default class CustomField extends Field {\n  recursiveClone(children) {\n    const { entityField } = this.props;\n    return React.Children.map(children, child => {\n      let childProps = {};\n      if (React.isValidElement(child)) {\n        if (child.props.name === entityField) {\n          const value = this.state.value || child.props.defaultValue;\n          childProps = {\n            ref: (node) => {\n              this.node = node;\n              if (typeof child.ref === 'function') {\n                child.ref(node);\n              }\n            },\n            value: undefined,\n            defaultValue: value,\n            onChange: this.onChange,\n            className: classnames(child.props.className, this.getFieldClasses())\n          };\n        }\n      }\n      if ((child) && child.props) {\n        childProps.children = this.recursiveClone(child.props.children);\n        return React.cloneElement(child, childProps);\n      }\n      return child;\n    });\n  }\n\n  render() {\n    return (\n      <section className={this.getContainerClasses()}>\n        {this.recursiveClone(this.props.children)}\n      </section>\n    );\n  }\n}\n"]}