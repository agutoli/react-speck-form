{"version":3,"sources":["../../src/Types/TypeDiscoverer.js"],"names":["TYPES","array","string","number","bool","func","object","oneOf","specification","executeValidator","validator","typeName","errors","isReqRegex","RegExp","isRequered","test","oneOfArray","exec","name","options","JSON","parse"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,MAAMA,QAAQ;AACZC,WAAO,EADK;AAEZC,YAAQ,EAFI;AAGZC,YAAQ,CAHI;AAIZC,UAAM,IAJM;AAKZC,UAAM,gBAAM,CAAE,CALF;AAMZC,YAAQ,EANI;AAOZC,WAAO;AAPK,GAAd;;oBAUe,UAACC,aAAD,EAAmB;;AAEhC,QAAIC,mBAAmBD,cAAcE,SAAd,IAA2BF,aAAlD;;AAEA,SAAK,IAAIG,QAAT,IAAqBX,KAArB,EAA4B;AAC1B,UAAIY,eAAJ;AACAA,eAASH,iBAAiB,EAAC,QAAQT,MAAMW,QAAN,CAAT,EAAjB,EAA4C,MAA5C,CAAT;AACA,UAAME,aAAa,IAAIC,MAAJ,CAAW,2CAAX,CAAnB;AACA,UAAMC,aAAaF,WAAWG,IAAX,CAAgBP,iBAAiB,EAAC,QAAQ,IAAT,EAAjB,EAAiC,MAAjC,CAAhB,CAAnB;;AAEA,UAAK,CAACG,MAAN,EAAe;AACb,eAAO;AACL,kBAAQD,QADH;AAEL,sBAAYI;AAFP,SAAP;AAID;AACD,cAAO,IAAP;AACE,aAAK,kBAAkBC,IAAlB,CAAuBJ,MAAvB,CAAL;AACE,cAAIK,aAAa,2BAA2BC,IAA3B,CAAgCN,MAAhC,CAAjB;AACA,cAAIK,cAAcA,WAAW,CAAX,CAAlB,EAAiC;AAC/B,mBAAO;AACLE,oBAAM,OADD;AAEL,0BAAYJ,UAFP;AAGLK,uBAASC,KAAKC,KAAL,CAAWL,WAAW,CAAX,CAAX,KAA6B;AAHjC,aAAP;AAKD;AACD;AAVJ;AAYD;AACF,G","file":"TypeDiscoverer.js","sourcesContent":["const TYPES = {\n  array: [],\n  string: '',\n  number: 0,\n  bool: true,\n  func: () => {},\n  object: {},\n  oneOf: \"____\"\n};\n\nexport default (specification) => {\n\n  let executeValidator = specification.validator || specification;\n\n  for (let typeName in TYPES) {\n    let errors;\n    errors = executeValidator({\"name\": TYPES[typeName]}, \"name\");\n    const isReqRegex = new RegExp('Required undefined (.*) was not specified');\n    const isRequered = isReqRegex.test(executeValidator({\"name\": null}, \"name\"));\n\n    if ( !errors ) {\n      return {\n        \"name\": typeName,\n        \"required\": isRequered\n      };\n    }\n    switch(true) {\n      case /expected one of/.test(errors):\n        let oneOfArray = /expected one of (\\[.*\\])/.exec(errors);\n        if (oneOfArray && oneOfArray[1]) {\n          return {\n            name: 'oneOf',\n            \"required\": isRequered,\n            options: JSON.parse(oneOfArray[1]) || []\n          };\n        }\n        break;\n    }\n  }\n};\n"]}